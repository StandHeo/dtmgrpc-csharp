name: Build_And_UnitTest

on:
  push:
    branches: [ dev, main, 'feat/**' ]
  pull_request:
    branches: [ dev, main ]

jobs:

  linux:    
    name: build on ${{ matrix.os }} 
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ windows-latest, ubuntu-latest ]

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET SDK 6.0.x
      uses: actions/setup-dotnet@v1.7.2
      with:
        dotnet-version: 6.0.x 
    
    - name: Setup .NET SDK 5.0.x
      uses: actions/setup-dotnet@v1.7.2
      with:
        dotnet-version: 5.0.x 

    - name: Setup .NET SDK 3.1.x
      uses: actions/setup-dotnet@v1.7.2
      with:
        dotnet-version: 3.1.x 

    - name: Show dotnet Version
      run: |
        dotnet --list-sdks
        dotnet --list-runtimes

    - name: Build with dotnet      
      run: |
        dotnet build src/Dtmgrpc/Dtmgrpc.csproj

    - name: Run tests on netcoreapp3.1
      run: |
        dotnet test --framework=netcoreapp3.1 tests/Dtmgrpc.Tests/Dtmgrpc.Tests.csproj

    - name: Run tests on net5.0
      run: |
        dotnet test --framework=net5.0 tests/Dtmgrpc.Tests/Dtmgrpc.Tests.csproj

    - name: Run tests on net6.0
      run: |
        dotnet test --framework=net6.0 tests/Dtmgrpc.Tests/Dtmgrpc.Tests.csproj --collect:"XPlat Code Coverage"

    - name: Prepare Codecov
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool

        reportgenerator -reports:"${{ github.workspace }}/tests/Dtmgrpc.Tests/TestResults/**/coverage.cobertura.xml" \
            -targetdir:"${{ github.workspace }}/coverage" \
            -classfilters:-*dtmgpb.*  \
            -reporttypes:Cobertura

        ls ${{ github.workspace }}/coverage/
    - name: Upload coverage to Codecov
      if: ${{ matrix.os == 'ubuntu-latest' }}
      uses: codecov/codecov-action@v2
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: true
        files: ${{ github.workspace }}/coverage/Cobertura.xml
        name: codecov-umbrella
        verbose: true    